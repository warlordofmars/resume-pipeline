/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
        classpath "javax.xml.bind:jaxb-api:2.3.0"
    }
}

ext {
    cloudformationBucket = 'warlordofmars-cloudformation'
    testWebsiteUrl = 'resume-test.warlordofmars.net'
    prodWebsiteUrl = 'resume.warlordofmars.net'
    testStackName = "ResumeWebsiteTest"
    prodStackName = 'ResumeWebsite'
    cloudformationSource = 'resume_website/resume_website.yaml'
    domainName = 'warlordofmars.net'
    wildcardCertARN = "arn:aws:acm:us-east-1:247631471946:certificate/471106fc-e3dd-4e0b-a20f-010a6e326283"
    productionBranch = 'master'
    
    
}

if (!project.hasProperty('previewHtmlFileName')) {
    ext.previewHtmlFileName = 'resume-preview.html'
}

if (!project.hasProperty('previewHtmlFileName')) {
    ext.productionHtmlFileName = 'index.html'
}

 def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

def isProd() {
    return (gitBranch() == productionBranch)
}

def getWebsiteUrl() {
    return ( isProd() ? prodWebsiteUrl : testWebsiteUrl)
}

def getStackName() {
    return ( isProd() ? prodStackName : testStackName)
}

def getHtmlResumeName() {
    return ( isProd() ? productionHtmlFileName : previewHtmlFileName)
}

ext.stackName = getStackName()
ext.websiteUrl = getWebsiteUrl()

afterEvaluate {

    apply plugin: 'jp.classmethod.aws.cloudformation'
    
    cloudFormation {
        stackName "${project.ext.stackName}"
        templateFile file(cloudformationSource)
        templateBucket cloudformationBucket
        templateKeyPrefix stackName
        stackParams ([
            'DomainName': domainName,
            'FullDomainName': websiteUrl,
            'AcmCertificateArn': wildcardCertARN
        ])
    }

    task('deployStack') {
        dependsOn awsCfnMigrateStackAndWaitCompleted
    }

    task('deleteStack') {
        dependsOn awsCfnDeleteStackAndWaitCompleted
    }

    awsCfnMigrateStack.dependsOn awsCfnUploadTemplate

    task('build') {
        doFirst {
            exec {
                commandLine 'hackmyresume', 'build', 'resume/resume.json', 'TO', 'out/resume.all', '-t', 'resume_theme/node_modules/jsonresume-theme-short/'
            }
        }
    }

    task('analyze') {
        doFirst {
            exec {
                commandLine 'hackmyresume', 'analyze', 'resume/resume.json'
            }
        }
    }

    task('validate') {
        doFirst {
            exec {
                commandLine 'hackmyresume', 'validate', 'resume/resume.json'
            }
        }
    }

    task('print') {
        mustRunAfter build
        doFirst {
            exec {
                commandLine 'lp', 'out/resume.pdf'
            }
        }
    }

    task('deploy') {
        mustRunAfter build
        dependsOn deployStack
        doFirst {

            exec {
                commandLine 'aws', 's3', 'cp', 'out/resume.html', "s3://${getWebsiteUrl()}/${getHtmlResumeName()}"
            }
        }
    }
}
