/*
 * resume/build.gradle
 */

import java.util.Random

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
        classpath "javax.xml.bind:jaxb-api:2.3.0"
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.0'
}

project.version = scmVersion.version

ext {
    cloudformationBucket = 'warlordofmars-cloudformation'
    testWebsiteUrl = 'resume-test.warlordofmars.net'
    prodWebsiteUrl = 'resume.warlordofmars.net'
    testStackName = "ResumeWebsiteTest"
    prodStackName = 'ResumeWebsite'
    cloudformationSource = 'website.yaml'
    domainName = 'warlordofmars.net'
    wildcardCertARN = "arn:aws:acm:us-east-1:247631471946:certificate/471106fc-e3dd-4e0b-a20f-010a6e326283"
    productionBranch = 'master'
    ensureStrings = ['John A. Carter', 'johncarter@warlordofmars.net', '(770) 598-7096']
    resumeSource = 'resume.json'
    htmlResumeTheme = 'theme/node_modules/jsonresume-theme-class/'
    pdfResumeTheme = 'theme/node_modules/jsonresume-theme-short/'
    spellCheckIgnoreList = 'spell_check_ignore.txt'
    resumeFormats = ['html', 'pdf', 'yml', 'md']
    productionNumberOfCopies = 10
    testResults = []
}

if (!project.hasProperty('previewHtmlFileName')) {
    def random = new Random()
    def randomNumber = random.nextInt() & Integer.MAX_VALUE
    ext.previewHtmlFileName = "resume-preview-${randomNumber}.html"
}

if (!project.hasProperty('productionHtmlFileName')) {
    ext.productionHtmlFileName = 'index.html'
}

 def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

def isProd() {
    return (gitBranch() == productionBranch)
}

def getWebsiteUrl() {
    return ( isProd() ? prodWebsiteUrl : testWebsiteUrl)
}

def getStackName() {
    return ( isProd() ? prodStackName : testStackName)
}

def getHtmlResumeName() {
    return ( isProd() ? productionHtmlFileName : previewHtmlFileName)
}

def getNumberOfCopies() {
    return ( isProd() ? productionNumberOfCopies : 1 )
}

ext.stackName = getStackName()
ext.websiteUrl = getWebsiteUrl()

task('checkPrerequisites') {
    doLast {
        def prerequisites = [
            'hackmyresume': 'Install via \'npm install -g hackmyresume\'',
            'aspell': 'Install via \'brew install aspell\'',
            'lp': 'This is a built-in that should already be there.  Why isn\'t it there?',
            'aws': 'Install via \'brew install awscli\'',
            'wkhtmltopdf': 'Install via \'brew install wkhtmltopdf\'',
            'cfn-lint': 'Install via \'pip install cfn-lint\'',
            'cfn_nag_scan': 'Install via \'gem install cfn-nag\''
        ]
        prerequisites.each { prerequisite, installNotes ->
            def checkPrereq = exec {
                commandLine 'which', prerequisite
                ignoreExitValue true
                standardOutput new ByteArrayOutputStream()
            }
            if (checkPrereq.getExitValue() != 0) {
                throw new GradleException("It appears that prerequisite '${prerequisite}' is not installed.\n\n${installNotes}\n")
            }

        }
    }
}

task('processTestResults') {
    mustRunAfter ':website:cfnLint'
    doLast {
        def testResultsXml = "<testsuite tests=\"${testResults.size()}\">\n"
        testResults.each { result ->
            testResultsXml = testResultsXml + "    <testcase classname=\"${result['classname']}\" name=\"${result['name']}\">\n"
            if(result.containsKey('systemOut')) {
                testResultsXml = testResultsXml + "        <system-out>${result['systemOut']}</system-out>\n"
            }
            if(result.containsKey('systemErr')) {
                testResultsXml = testResultsXml + "        <system-err>${result['systemErr']}</system-err>\n"
            }
            testResultsXml = testResultsXml + '    </testcase>'
        }
        testResultsXml = testResultsXml + '</testsuite>'
        file("${buildDir}/tests").mkdirs()
        def random = new Random()
        def randomNumber = random.nextInt() & Integer.MAX_VALUE
        file("${buildDir}/tests/results-${randomNumber}.xml").text = testResultsXml
    }
}

task('clean', type:Delete) {
    delete buildDir
}