/*
 * resume/build.gradle
 */

import java.util.Random
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
        classpath "javax.xml.bind:jaxb-api:2.3.0"
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.0'
}

project.version = scmVersion.version

ext {
    cloudformationBucket = 'warlordofmars-cloudformation'
    testWebsiteUrl = 'resume-test.warlordofmars.net'
    prodWebsiteUrl = 'resume.warlordofmars.net'
    testStackName = "ResumeWebsiteTest"
    prodStackName = 'ResumeWebsite'
    cloudformationSource = 'website.yaml'
    domainName = 'warlordofmars.net'
    wildcardCertARN = "arn:aws:acm:us-east-1:247631471946:certificate/471106fc-e3dd-4e0b-a20f-010a6e326283"
    productionBranch = 'master'
    ensureStrings = ['John A. Carter', 'johncarter@warlordofmars.net', '(770) 598-7096']
    resumeSource = 'resume.json'
    htmlResumeTheme = 'theme/node_modules/jsonresume-theme-class/'
    pdfResumeTheme = 'theme/node_modules/jsonresume-theme-short/'
    spellCheckIgnoreList = 'spell_check_ignore.txt'
    resumeFormats = ['html', 'pdf', 'yml', 'md']
    productionNumberOfCopies = 10
    testResults = []
    registeredTests = []
}

if (!project.hasProperty('previewHtmlFileName')) {
    def random = new Random()
    def randomNumber = random.nextInt() & Integer.MAX_VALUE
    ext.previewHtmlFileName = "resume-preview-${randomNumber}.html"
}

if (!project.hasProperty('productionHtmlFileName')) {
    ext.productionHtmlFileName = 'index.html'
}

 def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

def isProd() {
    return (gitBranch() == productionBranch)
}

def getWebsiteUrl() {
    return ( isProd() ? prodWebsiteUrl : testWebsiteUrl)
}

def getStackName() {
    return ( isProd() ? prodStackName : testStackName)
}

def getHtmlResumeName() {
    return ( isProd() ? productionHtmlFileName : previewHtmlFileName)
}

def getNumberOfCopies() {
    return ( isProd() ? productionNumberOfCopies : 1 )
}


ext.stackName = getStackName()
ext.websiteUrl = getWebsiteUrl()

task('checkPrerequisites') {
    doLast {
        def prerequisites = [
            'hackmyresume': 'Install via \'npm install -g hackmyresume\'',
            'aspell': 'Install via \'brew install aspell\'',
            'lp': 'This is a built-in that should already be there.  Why isn\'t it there?',
            'aws': 'Install via \'brew install awscli\'',
            'wkhtmltopdf': 'Install via \'brew install wkhtmltopdf\'',
            'cfn-lint': 'Install via \'pip install cfn-lint\'',
            'cfn_nag_scan': 'Install via \'gem install cfn-nag\''
        ]
        prerequisites.each { prerequisite, installNotes ->
            def checkPrereq = exec {
                commandLine 'which', prerequisite
                ignoreExitValue true
                standardOutput new ByteArrayOutputStream()
            }
            if (checkPrereq.getExitValue() != 0) {
                throw new GradleException("It appears that prerequisite '${prerequisite}' is not installed.\n\n${installNotes}\n")
            }

        }
    }
}

task('processTestResults') {
    doLast {
        def inFile = file("${buildDir}/report.xml")
        def xml = new XmlSlurper().parseText(inFile.text)

        xml.testsuite.each { testsuite ->
            // println testsuite.@name
            testResults.each { result ->
                // println "${result['name']} ${testsuite.@name}"
                if("${result['classname']}" == "${testsuite.@classname}" && "${result['name']}" == "${testsuite.@name}") {
                    println "Found test result: ${testsuite.@name}"
                    testsuite.skipped.replaceNode { }
                    if(result.containsKey('systemOut')) {
                        testsuite.appendNode {
                            'system-out'(result['systemOut'])
                        }
                    }
                    if(result.containsKey('failure')) {
                        testsuite.appendNode {
                            failure(type: result['failure']['type'], details: result['failure']['details'])
                        }
                    }
                }
            }
            
        }

        inFile.withWriter { outWriter ->
            XmlUtil.serialize( new StreamingMarkupBuilder().bind{ mkp.yield xml }, outWriter )
        }
    }
}

task('clean', type:Delete) {
    delete buildDir
}

class Test {
    String name
    String classname
    String rootTask
    Project project
    
    Test(classname, name, rootTask, project) {
        this.classname = classname
        this.name = name
        this.rootTask = rootTask
        this.project = project

        this.project.ext.registeredTests << [classname: this.classname, name: this.name]
    }

    void success(String output) {
        this.project.ext.testResults << [classname: this.classname, name: name, systemOut: output]
    }

    void failure(String type, String output) {
        this.project.ext.testResults << [classname: this.classname, name: name, failure: [type: type, details: output]]
    }
}

// ext.cfnTemplateDeployedTest = new Test(cloudformationSource, 'Resume Website CloudFormation Template Deployed', project)
// ext.cfnLintTest = new Test(cloudformationSource, 'Resume Website CloudF

task('registerTests') {
    doFirst {
        def sw = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(sw)
        xml.testsuites {
            subprojects.each {
                if(it.hasProperty('tests')) {
                    it.tests.each { name, test ->
                        project.ext."${name}" = new Test(test[0], test[1], test[2], project)
                        testsuite(classname: test[0], name: test[1]) {
                            skipped()
                        }
                    
                    }
                }
            }
        }
        file("${buildDir}").mkdirs()
        file("${buildDir}/report.xml").write(sw.toString())
        
    }
    
}