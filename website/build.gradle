import groovy.json.JsonSlurper

apply plugin: 'jp.classmethod.aws.cloudformation'
    
cloudFormation {
    stackName "${rootProject.ext.stackName}"
    templateFile file(cloudformationSource)
    templateBucket cloudformationBucket
    templateKeyPrefix stackName
    stackParams ([
        'DomainName': domainName,
        'FullDomainName': websiteUrl,
        'AcmCertificateArn': wildcardCertARN
    ])
}

task('deploy') {
    dependsOn awsCfnMigrateStackAndWaitCompleted
    finalizedBy rootProject.processTestResults
    doLast {

    
        def out = new ByteArrayOutputStream()
        exec {
            commandLine 'aws', 'cloudformation', 'describe-stacks', '--stack-name', getStackName()
            standardOutput out
        }
        
        def stackDetails = new JsonSlurper().parseText(out.toString())['Stacks'][0]
        

        def message = "cloudformation stack \"${stackDetails['StackName']}\" has status: \"${stackDetails['StackStatus']}\"\n\nstack created: \"${stackDetails['CreationTime']}\"\nstack last updated: \"${stackDetails['LastUpdatedTime']}\"\n\n"
        stackDetails['Outputs'].each { output ->
            message = message + "${output['OutputKey']}: \"${output['OutputValue']}\"\n"
        }

        if(stackDetails['StackStatus'] in ["CREATE_COMPLETE", "UPDATE_COMPLETE"]) {
            rootProject.ext.testResults << [classname: cloudformationSource, name: 'Resume Website CloudFormation Template Deployed', systemOut: message]
            println message
        } else {
            rootProject.ext.testResults << [classname: cloudformationSource, name: 'Resume Website CloudFormation Template Deployed', failure: [type: 'CloudFormation Failed to Deploy', details: message]]
            throw new GradleException(message)
        }
        
    }
}

awsCfnUploadTemplate.finalizedBy deploy
awsCfnMigrateStack.finalizedBy deploy
awsCfnWaitStackComplete.finalizedBy deploy
awsCfnMigrateStackAndWaitCompleted.finalizedBy deploy

task('delete') {
    dependsOn awsCfnDeleteStackAndWaitCompleted
}

awsCfnMigrateStack.dependsOn awsCfnUploadTemplate

task('cfnLint') {
    dependsOn rootProject.checkPrerequisites
    finalizedBy rootProject.processTestResults
    doFirst {
        def out = new ByteArrayOutputStream()
        def result = exec {
            commandLine 'cfn-lint', cloudformationSource
            standardOutput out
            ignoreExitValue true
        }
        if(result.getExitValue() == 0) {
            rootProject.ext.testResults << [classname: cloudformationSource, name: 'Resume Website CloudFormation Linting / Syntax Check', systemOut: 'All Checks Passed']
        } else {
            rootProject.ext.testResults << [classname: cloudformationSource, name: 'Resume Website CloudFormation Linting / Syntax Check', failure: [type: 'CloudFormation Syntax Error', details: out.toString()]]
            throw new GradleException(out.toString())
        }
    }
}

task('cfnNag') {
    dependsOn rootProject.checkPrerequisites
    finalizedBy rootProject.processTestResults
    doFirst {
        def out = new ByteArrayOutputStream()
        def result = exec {
            commandLine 'cfn_nag_scan', '--input-path', cloudformationSource
            standardOutput out
            ignoreExitValue true
        }
        if(result.getExitValue() == 0) {
            rootProject.ext.testResults << [classname: cloudformationSource, name: 'Resume Website CloudFormation Best Practices', systemOut: out.toString()]
            println out.toString()
        } else {
            rootProject.ext.testResults << [classname: cloudformationSource, name: 'Resume Website CloudFormation Best Practices', failure: [type: 'Not Adhering to CloudFormation Best Practices', details: out.toString()]]
            throw new GradleException(out.toString())
        }
        
    }
}

task('build') {
    dependsOn cfnLint, cfnNag
}