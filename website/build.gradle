apply plugin: 'jp.classmethod.aws.cloudformation'
    
cloudFormation {
    stackName "${rootProject.ext.stackName}"
    templateFile file(cloudformationSource)
    templateBucket cloudformationBucket
    templateKeyPrefix stackName
    stackParams ([
        'DomainName': domainName,
        'FullDomainName': websiteUrl,
        'AcmCertificateArn': wildcardCertARN
    ])
}

task('deploy') {
    dependsOn awsCfnMigrateStackAndWaitCompleted
    finalizedBy rootProject.processTestResults
    doLast {
        rootProject.ext.testResults << [classname: cloudformationSource, name: 'CloudFormation Template Successfully Deployed']
    }
}

task('delete') {
    dependsOn awsCfnDeleteStackAndWaitCompleted
}

awsCfnMigrateStack.dependsOn awsCfnUploadTemplate

task('cfnLint') {
    dependsOn rootProject.checkPrerequisites
    finalizedBy rootProject.processTestResults
    doFirst {
        exec {
            commandLine 'cfn-lint', cloudformationSource
        }
        rootProject.ext.testResults << [classname: cloudformationSource, name: 'cfn-lint: CloudFormation Linting']
    }
}

task('cfnNag') {
    dependsOn rootProject.checkPrerequisites
    finalizedBy rootProject.processTestResults
    doFirst {
        def out = new ByteArrayOutputStream()
        exec {
            commandLine 'cfn_nag_scan', '--input-path', cloudformationSource
            standardOutput out
        }
        rootProject.ext.testResults << [classname: cloudformationSource, name: 'cfn_nag: CloudFormation Best Practices', systemOut: out.toString()]
        println out.toString()
    }
}

task('build') {
    dependsOn cfnLint, cfnNag
}